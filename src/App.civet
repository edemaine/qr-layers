solid-js import {createSignal, For, Show}
qrcode import qrcode, {type BitMatrix}
./layers.civet import {layering}
./matrix.civet import {bitMatrixToMatrix, Matrix}

export function DisplayMatrix(props: {matrix: Matrix?})
  <Show when=props.matrix keyed>(matrix) =>
    nx := matrix.nx
    ny := matrix.ny
    <svg viewBox=`0 0 ${nx} ${ny}`>
      <For each=[0...nx]>(x) =>
        <For each=[0...ny]>(y) =>
          <rect {x,y} width=1 height=1 fill={matrix.get(x, y) ? 'black' : 'white'} stroke={matrix.get(x, y) ? 'black' : 'white'} stroke-width={0.01}>

export function App()
  [qrMatrix, setQrMatrix] := createSignal<Matrix?>()
  [layers, setLayers] := createSignal<{levels: number, layer: Matrix}?>()
  function onInput(e)
    qr := qrcode.create e.currentTarget.value
    setQrMatrix bitMatrixToMatrix qr.modules
    setLayers layering qrMatrix()!
  <form>
    <input {onInput}>
  <DisplayMatrix matrix={qrMatrix()}/>
  <For each=[1<=..layers()?.levels ?? 0]>(level) =>
    <DisplayMatrix matrix={layers()?.layer.filter level}>
