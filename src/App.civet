solid-js import {batch, createEffect, createMemo, createSignal, onMount, Index, For, Show}
solid-js/store import {createStore, reconcile}
qrcode import qrcode, {type BitMatrix, type QRCode}
@soorria/solid-dropzone import {createDropzone}

./layers.civet import {computeLayering, computeOutlines, type Layering}
./matrix.civet import {bitMatrixToMatrix, Matrix, type MatrixType}
./qrbg.civet import {qrbg}

export function DisplayMatrix(props: {matrix: MatrixType?, color?: number, margin: number})
  onColor := createMemo => props.color is not 0 ? "black" : "white"
  offColor := createMemo => props.color is not 0 ? "white" : "black"
  width := createMemo => props.matrix!.nx + 2 * props.margin
  height := createMemo => props.matrix!.ny + 2 * props.margin
  <Show when=props.matrix keyed>(matrix) =>
    <svg viewBox=`${-props.margin} ${-props.margin} ${width()} ${height()}`>
      <rect x=-props.margin y=-props.margin {width(), height()} fill={props.color? ? onColor() : "white"}>
      <For each=[0...matrix.nx]>(x) =>
        <For each=[0...matrix.ny]>(y) =>
          <rect {x,y} width=1 height=1 fill={matrix.get(x, y) ? onColor() : offColor()} stroke={matrix.get(x, y) ? onColor() : offColor()} stroke-width={0.05}>

export function DisplayColorMatrix(props: {matrix: MatrixType?, margin: number})
  width := createMemo => props.matrix!.nx + 2 * props.margin
  height := createMemo => props.matrix!.ny + 2 * props.margin
  <Show when=props.matrix keyed>(matrix) =>
    <svg viewBox=`${-props.margin} ${-props.margin} ${width()} ${height()}`>
      <rect x=-props.margin y=-props.margin {width(), height()} fill="white">
      <For each=[0...matrix.nx]>(x) =>
        <For each=[0...matrix.ny]>(y) =>
          <rect {x,y} width=1 height=1 fill={'#' + matrix.get(x, y).toString(16).padStart(6, '0')} stroke={'#' + matrix.get(x, y).toString(16).padStart(6, '0')} stroke-width={0.05}>

export function DisplayOutlines(props: {nx: number, ny: number, outlines: [number, number][][]?, fill?: number, stroke?: number, shadow?: boolean, fillColors?: string[], strokeColors?: string[], background?: string, margin: number})
  onColor := createMemo => props.fill is not 0 ? "white" : "black"
  offColor := createMemo => props.fill is not 0 ? "black" : "white"
  width := createMemo => props.nx + 2 * props.margin
  height := createMemo => props.ny + 2 * props.margin
  <svg viewBox=`${-props.margin} ${-props.margin} ${width()} ${height()}`>
    <rect x=-props.margin y=-props.margin {width(), height()} fill={props.background ?? (props.stroke ? "white" : offColor())}>
    <For each=props.outlines>(polygon, index) =>
      <polygon points={polygon.map([x, y] => `${x},${y}`).join " "}
      fill={props.shadow ? offColor() : props.stroke ? "none" : props.fillColors ? props.fillColors[index()] : onColor()}
      stroke={props.stroke ? props.strokeColors?[index()] ?? "black" : "none"}
      stroke-width={props.stroke}
      style={if props.shadow then `filter: drop-shadow(0 0 0.1px ${onColor()})`}>

defaults := {}
  text: ''
  quality: 'M'
  margin: 1
  stroke: 0.2
  scale: 3
  center: 1
  useColor: true
as const

export function App()
  [text, setText] := createSignal<string> defaults.text
  [quality, setQuality] := createSignal<"L" | "M" | "Q" | "H"> defaults.quality
  [marginMain, setMarginMain] := createSignal<number> defaults.margin
  [stroke, setStroke] := createSignal<number> defaults.stroke
  [qrMain, setQrMain] := createSignal<Matrix?>()
  [qrWithBg, setQrWithBg] := createSignal<Matrix?>()
  [qrColor, setQrColor] := createSignal<Matrix?>()
  qrMatrix := => qrWithBg() ?? qrMain()
  [qrInfo, setQrInfo] := createSignal<{version: number, segments: QRCode["segments"]}?>()
  [layers, setLayers] := createSignal<Layering?>()
  [outlines, setOutlines] := createSignal<[number, number][][][]?>()
  [stackColors, setStackColors] := createStore<string?[]>([])
  function getStackColor(i: number): string
    stackColors[i] ?? (i % 2 ? '#000000' : '#ffffff')

  let qualityRef: HTMLSelectElement
  createEffect =>
    unless text()
      batch =>
        setQrMain undefined
        setQrInfo undefined
      return
    qr := qrcode.create text(), errorCorrectionLevel: quality()
    batch =>
      setQrMain bitMatrixToMatrix qr.modules
      setQrInfo qr.{version,segments}
  createEffect =>
    qr := qrMatrix()
    unless qr
      batch =>
        setLayers undefined
        setOutlines undefined
      return
    // Force initial color of 0 (white) to guarantee white margin
    batch =>
      setLayers computeLayering qr, 0
      setOutlines
        for level of [1<=..layers()!.levels]
          computeOutlines
            layers()!.layer.map (value) => Number value <= level

  function loadURL: void
    batch =>
      params := new URLSearchParams window.location.search
      setText params.get('text') ?? defaults.text
      if params.get('quality') is in ['L', 'M', 'Q', 'H'] as (string??)[]
        setQuality params.get('quality') as 'L' | 'M' | 'Q' | 'H'
      else
        setQuality defaults.quality
      m .= parseInt params.get('margin')!, 10
      setMarginMain isNaN(m) ? defaults.margin : m
      s .= parseFloat params.get('stroke')!
      setStroke isNaN(s) ? defaults.stroke : s
      uc .= parseInt params.get('color')!, 10
      setUseColor isNaN(uc) ? defaults.useColor : !!uc
      s2 .= parseInt params.get('scale')!, 10
      setScale isNaN(s2) ? defaults.scale : s2
      c .= parseInt params.get('center')!, 10
      setCenter isNaN(c) ? defaults.center : c
      sc .= (params.get('stackColors') ?? '').split(/,/g).map(& or undefined)
      sc.pop() while sc# and not sc.-1?
      sc |>= .map (c) => c and `#${c}`
      setStackColors reconcile sc
  onMount => loadURL()
  window.addEventListener 'popstate', loadURL

  createEffect =>
    // Update URL
    search .= ''
    search += `&text=${encodeURIComponent text()}` if text() is not defaults.text
    search += `&quality=${quality()}` if quality() is not defaults.quality
    search += `&margin=${marginMain()}` if marginMain() is not defaults.margin
    search += `&stroke=${stroke()}` if stroke() is not defaults.stroke
    search += `&color=${Number useColor()}` if useColor() is not defaults.useColor
    search += `&scale=${scale()}` if scale() is not defaults.scale
    search += `&center=${center()}` if center() is not defaults.center
    search += `&stackColors=${stackColors.join(',').replace(/#/g, '')}` if stackColors.join ','
    search = `?${search[1..]}` if search
    unless search is window.location.search
      history.pushState null, 'qr', `${window.location.pathname}${search}`

  let downloadRef: HTMLAnchorElement
  function download(className: string): void
    svgs := document.querySelectorAll `.${className} svg`
    for each svg, i of svgs
      text := `<?xml version="1.0" encoding="utf-8"?>\n` + svg.outerHTML
      .replace /<svg/, `<svg xmlns="http://www.w3.org/2000/svg" version="1.1"`
      url := URL.createObjectURL new Blob [text], type: 'image/svg+xml'
      downloadRef.href = url
      downloadRef.download = `qr-${className}${if svgs# is 1 then '' else i+1}.svg`
      downloadRef.click() // synchronous
      downloadRef.href = ''
      URL.revokeObjectURL url

  function makeAlphanumeric(): void
    text()
    |> .toUpperCase()
    |> .replace /[^A-Z0-9 $%*+\-./:]/g, ''
    |> setText

  [fileInfo, setFileInfo] := createSignal ''
  [image, setImage] := createSignal<HTMLImageElement?>()
  [useColor, setUseColor] := createSignal<boolean> defaults.useColor
  [scale, setScale] := createSignal<number> defaults.scale
  margin := createMemo =>
    if qrWithBg()
      marginMain() * scale()
    else
      marginMain()
  [center, setCenter] := createSignal<number> defaults.center
  dropzone := createDropzone
    noClick: true
    onDrop: (files) =>
      file := files[0]
      setFileInfo `${file.name} (${file.type}, ${file.size} bytes)`
      img := document.createElement 'img'
      img.className = 'bgImage'
      try
        await new Promise (^img.onload, ^img.onerror) =>
          img.src = URL.createObjectURL file
      catch e
        setFileInfo (i) => `${i} ERROR LOADING AS IMAGE`
        setImage undefined
        return
      setImage img
  createEffect (lastUrl: string?) =>
    URL.revokeObjectURL lastUrl if lastUrl
    image()?.src
  createEffect =>
    qr := qrMain()
    img := image()
    unless qr and img
      setQrWithBg undefined
      return
    canvas := document.createElement 'canvas'
    canvas.width = scale() * qr.nx
    canvas.height = scale() * qr.ny
    context := canvas.getContext('2d')!
    canvasScale := Math.min canvas.width / img.naturalWidth, canvas.height / img.naturalHeight
    context.scale canvasScale, canvasScale
    context.drawImage img, 0, 0
    imageData := context.getImageData 0, 0, canvas.width, canvas.height
    setQrWithBg qrbg qr, qrInfo()!, imageData, center()
    if useColor()
      setQrColor qrbg qr, qrInfo()!, imageData, center(), true

  <header>
    <h1>QR Designer
    <h2 style="text-align: right">
      by <a href="https://erikdemaine.org/">Erik Demaine</a> and <a href="https://martindemaine.org/">Martin Demaine</a>
  <form onSubmit={(e) => e.preventDefault()} {...dropzone.getRootProps()} classList={active: dropzone.isDragActive}>
    <input placeholder="Message for QR code" style="width: 500px" value=text()
    onInput=
      (e) => setText e.currentTarget.value
    >
    <button onClick=makeAlphanumeric title="Convert text to fit QR alphanumeric mode, making the QR code smaller">
      Make Alphanumeric
    <br>
    <label title=
      "Increasing error correction will result in larger QR codes that are more robust to mistakes"
    >QR error correction: 
      <select value=quality() onInput=
        (e) => setQuality e.currentTarget.value as "L" | "M" | "Q" | "H"
      >
        <option value="L">Low (~7%)
        <option value="M">Medium (~15%)
        <option value="Q">Quartile (~25%)
        <option value="H">High (~30%)
    <label title=
      "Add a margin of this many pixels around the QR code"
    >Margin: 
      <input type="number" value=marginMain() min=0 step="any" onInput=
        (e) => setMarginMain e.currentTarget.valueAsNumber
      >
    <div>
      <input {...dropzone.getInputProps()}>
      <button onClick=dropzone.open title=
        "Overlay a background image onto the QR code in between the pixel centers (for layering, works best with images already dithered to black and white with the correct resolution)"
      >Background image file
      {fileInfo()}{' '}
      {image()}
      <Show when=image()>
        <br>
        <button onClick=
          :void => setImage undefined
        >Clear background image
        <label title=
          "Use color from the background image in the first QR code (but not layers)"
        >Color?
          <input type="checkbox" checked=useColor() onInput=
            (e) => setUseColor e.currentTarget.checked
          >
        <label title=
          "Scale each QR pixel into a square with this dimension"
        >Scale: 
          <input type="number" value=scale() min=1 onInput=
            (e) => setScale e.currentTarget.valueAsNumber
          >
        <label title=
          "Use the QR code's coloring within a square of this dimension"
        >Center: 
          <input type="number" value=center() min=1 onInput=
            (e) => setCenter e.currentTarget.valueAsNumber
          >
  <Show when={not qrMatrix()}>
    <h2>Welcome! Enter any message in the box above to create a QR code.
  <Show when=qrMatrix()>
    <h2>QR Code: {qrMain()!.nx}×{qrMain()!.ny} (version {qrInfo()?.version}-{quality()})
      <Show when=qrWithBg()>
        <span>, scaled to {qrWithBg()!.nx}×{qrWithBg()!.ny}
    <p .encoding>
      <b>Encoding:</b>
      <For each=qrInfo()?.segments>(segment) => <>
        {' • '}{segment.getLength()} {segment.mode.id}s in {segment.getBitsLength()} bits
    >if useColor() and qrColor()
      <DisplayColorMatrix matrix=qrColor() {margin()}>
    else
      <DisplayMatrix matrix=qrMatrix() {margin()}>
  <Show when=false>
    <h2>{layers()?.levels} Layers as pixels
    <For each=[1<=..layers()?.levels ?? 0]>(level) =>
      <DisplayMatrix matrix={layers()?.layer.map (value) => Number value <= level} color=layers()?.colorMap.get(level) {margin()}>
  <Show when={outlines() and qrMatrix()}>
    <h2>{layers()?.levels} Layers &mdash; <i>stack these up to make the QR code</i>
    <.layers>
      <For each=outlines()>(outlines, level) =>
        <DisplayOutlines {outlines, qrMatrix()!.nx, qrMatrix()!.ny} fill=layers()!.colorMap.get(level()+1)! {margin()}>
        <!--<DisplayOutlines {outlines, qrMatrix()!.{nx,ny}} color=layers()!.colorMap.get(level)! {margin()}>-->
    <button onClick={(e) => download 'layers'}>Download SVGs
    <a ref=downloadRef! style="display: none">

    <h2>Colored Stack &mdash; <i>click the boxes to change the layer colors</i>
    <form>
      <Index each=outlines()!>
        (o, i) =>
          <input type="color"
            value=
              getStackColor i
            onInput=
              (e) => setStackColors i, e.currentTarget.value
          >
    <.coloredStack>
      <DisplayOutlines outlines=outlines()!.flat()
        fillColors=
          for layer, i of outlines()!
            for j of [1..layer#]
              getStackColor i+1
              /* Regular QR:
              if layers()!.colorMap.get(i+1)
                'white'
              else
                'black'
              */
          .flat()
        background=getStackColor(0)
        fill=0
        {qrMatrix()!.nx, qrMatrix()!.ny}
        {margin()}>
    <button onClick={(e) => download 'coloredStack'}>Download SVG

    <h2>Same-Color Stacks &mdash; <i>white stack and black stack</i>
    <div>
      <For each=[0,1]>(color) =>
        <DisplayOutlines outlines=
          for outline, i of outlines()! when layers()!.colorMap.get(i+1) is color
            outline
          .flat()
        {qrMatrix()!.nx, qrMatrix()!.ny} fill=color shadow {margin()}>

    <h2>Coloring Book &mdash; <i>fill in alternating black/white to scan</i>
    <label>Line width:
      <input type="number" min=0 value=stroke() step="0.05" onInput=
        (e) => setStroke e.currentTarget.valueAsNumber
      >
    <.outlines>
      <DisplayOutlines outlines=outlines()!.flat() {qrMatrix()!.nx, qrMatrix()!.ny} {margin(), stroke()}>
    <button onClick={(e) => download 'outlines'}>Download SVG
    <Show when=false>
      <.coloredOutlines>
        <DisplayOutlines outlines=outlines()!.flat() {qrMatrix()!.nx, qrMatrix()!.ny} {margin(), stroke()} strokeColors=
          do
            colors := ["black", "#a00"]
            strokes := []
            for outline, i of outlines()!
              color := colors[i%]
              for polygon of outline
                strokes.push color
            strokes
        >
      <button onClick={(e) => download 'coloredOutlines'}>Download SVG
    <h2>{layers()?.levels} Layer Outlines
    <.outline>
      <For each=outlines()>(outlines) =>
        <DisplayOutlines {outlines, qrMatrix()!.nx, qrMatrix()!.ny} {margin(), stroke()}>
    <button onClick={(e) => download 'outline'}>Download SVGs

    <Show when=false>
      <h2>{layers()?.levels} Levels
      <For each=[1<=..layers()?.levels ?? 0]>(level) =>
        <DisplayMatrix matrix={layers()?.layer.map (value) => Number value is level} {margin()}>

  <footer>
    <hr>
    <span>[<a href="https://github.com/edemaine/qr-layers">Source code on GitHub</a>]