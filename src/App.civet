solid-js import {createMemo, createSignal, For, Show}
qrcode import qrcode, {type BitMatrix}
./layers.civet import {layering, type Layering}
./matrix.civet import {bitMatrixToMatrix, Matrix}

export function DisplayMatrix(props: {matrix: Matrix?, color?: number})
  onColor := createMemo => props.color is not 0 ? "black" : "white"
  offColor := createMemo => props.color is not 0 ? "white" : "black"
  <Show when=props.matrix keyed>(matrix) =>
    nx := matrix.nx
    ny := matrix.ny
    <svg viewBox=`-1 -1 ${nx+2} ${ny+2}`>
      <rect x=-1 y=-1 width={nx+2} height={ny+2} fill={props.color? ? onColor() : "white"}>
      <For each=[0...nx]>(x) =>
        <For each=[0...ny]>(y) =>
          <rect {x,y} width=1 height=1 fill={matrix.get(x, y) ? onColor() : offColor()} stroke={matrix.get(x, y) ? onColor() : offColor()} stroke-width={0.05}>

export function App()
  [qrMatrix, setQrMatrix] := createSignal<Matrix?>()
  [layers, setLayers] := createSignal<Layering?>()
  function onInput(e)
    text := e.currentTarget.value
    unless text
      setQrMatrix undefined
      setLayers undefined
      return
    qr := qrcode.create text
    setQrMatrix bitMatrixToMatrix qr.modules
    setLayers layering qrMatrix()!
  <form onSubmit={(e) => e.preventDefault()}>
    <input {onInput} placeholder="Message for QR code" style="width: 500px">
  <Show when=qrMatrix()>
    <h2>QR Code
    <DisplayMatrix matrix=qrMatrix()/>
  <Show when=layers()>
    <h2>{layers()?.levels} Layers
    <For each=[1<=..layers()?.levels ?? 0]>(level) =>
      <DisplayMatrix matrix={layers()?.layer.map (value) => Number value <= level} color=layers()?.colorMap.get(level)>
    <h2>{layers()?.levels} Levels
    <For each=[1<=..layers()?.levels ?? 0]>(level) =>
      <DisplayMatrix matrix={layers()?.layer.map (value) => Number value is level}>
