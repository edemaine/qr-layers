{Matrix, type MatrixType} from ./matrix.civet

type XY = [number, number]

directions := [[-1, 0], [1, 0], [0, -1], [0, 1]]

export type Layering =
  levels: number
  layer: Matrix
  colorMap: Map<number, number>

export function computeLayering(matrix: Matrix, color?: number): Layering
  // Guessing of initial color
  unless color?
    layering0 := computeLayering matrix, 0
    layering1 := computeLayering matrix, 1
    if layering0.levels <= layering1.levels
      return layering0
    else
      return layering1

  colorMap := new Map<number, number>
  colorMap.set 1, color
  {nx, ny} := matrix
  layer := new Matrix Uint8Array, nx, ny

  // First layer is the entire boundary, restricted to initial color
  levels .= 1
  last: XY[] .= []
  function boundary(x: number, y: number): void
    if color is matrix.get x, y
      layer.set x, y, levels
      last.push [x, y]
  for x of [0...nx]
    boundary x, 0
    boundary x, ny-1
  for y of [0...ny]
    boundary 0, y
    boundary nx-1, y

  // BFS
  while last#
    colorMap.set levels, color
    next: XY[] := []
    for let i = 0; i < last.length; i++
      [x, y] := last[i]
      for each [dx, dy] of directions
        x2 := x + dx
        y2 := y + dy
        if layer.has(x2, y2) and not layer.get(x2, y2)
          if color is matrix.get x2, y2
            layer.set x2, y2, levels
            last.push [x2, y2]
          else
            layer.set x2, y2, levels+1
            next.push [x2, y2]
    last = next
    if last#
      levels++
      color = 1 - color

  {levels, layer, colorMap}

function rotateLeft(dx: number, dy: number): [number, number]
  [dy, -dx]
function rotateRight(dx: number, dy: number): [number, number]
  [-dy, dx]

export function computeOutlines(matrix: MatrixType, color: number = 0): XY[][]
  function on(x: number, y: number): boolean
    (and)
      matrix.has x, y
      color is matrix.get x, y
  function off(x: number, y: number): boolean
    not on x, y

  visited := new Matrix Uint8Array, matrix.nx + 1, matrix.ny + 1
  polygons := []

  // Seed outlining from any top-left corner pixel
  for y of [0..<matrix.ny]
    for x of [0..<matrix.nx]
      continue if visited.get x, y
      continue unless // Top-left corner
        (and)
          on x, y
          off x-1, y
          off x, y-1
          off x-1, y-1
      visited.set x, y, 1

      // Trace the outline from [x,y] starting by going right,
      // until we loop
      polygon: XY[] := [[x, y]]
      x1 .= x
      y1 .= y
      dx .= 1
      dy .= 0
      let dxPrev: number?, dyPrev: number?
      for [0..1000000]
        x2 := x1 + dx
        y2 := y1 + dy
        break if x2 is x and y2 is y
        visited.set x2, y2, 1
        polygon.pop() if dx is dxPrev and dy is dyPrev
        polygon.push [x2, y2]
        dxPrev = dx
        dyPrev = dy
        // Follow outline as leftmost as possible:
        // Consider rotated left, straight, and rotated right in that order
        dx = -dx
        dy = -dy
        for [1..3]
          px := dx
          py := dy
          [dx, dy] = rotateRight dx, dy
          break if
            (and)
              0 <= x2 <= matrix.nx
              0 <= y2 <= matrix.ny
              on x2 + (dx - px - 1)/2, y2 + (dy - py - 1)/2
              off x2 + (dx + px - 1)/2, y2 + (dy + py - 1)/2
        x1 = x2
        y1 = y2
      polygons.push polygon
  polygons
